{"map":"{\"version\":3,\"sources\":[\"/home/precisemotion/Documents/workspace/groupify/client/src/App.js\",\"/home/precisemotion/Documents/workspace/groupify/client/src/LoggedIn.js\",\"/home/precisemotion/Documents/workspace/groupify/client/src/serviceWorker.js\",\"/home/precisemotion/Documents/workspace/groupify/client/src/index.js\",\"/home/precisemotion/Documents/workspace/groupify/client/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/home/precisemotion/Documents/workspace/groupify/client/src/logo.svg\"],\"names\":[\"spotifyWebApi\",\"Spotify\",\"App\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"params\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"getHashParams\",\"state\",\"loggedIn\",\"access_token\",\"setAccessToken\",\"e\",\"hashParams\",\"r\",\"q\",\"window\",\"location\",\"hash\",\"substring\",\"exec\",\"decodeURIComponent\",\"react_default\",\"a\",\"createElement\",\"className\",\"href\",\"Component\",\"Boolean\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\",\"module\",\"exports\",\"__webpack_require__\",\"p\"],\"mappings\":\"qQAKMA,EAAgB,IAAIC,EAAAA,EAiCXC,cA9Bb,SAAAA,IAAa,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAEX,IAAMK,GADNJ,EAAAC,OAAAI,EAAA,EAAAJ,CAAAE,KAAAF,OAAAK,EAAA,EAAAL,CAAAF,GAAAQ,KAAAJ,QACoBK,gBAFT,OAGXR,EAAKS,MAAQ,CACXC,WAAUN,EAAOO,cAEfP,EAAOO,cACTd,EAAce,eAAeR,EAAOO,cAP3BX,+EAcX,IAHA,IACIa,EADAC,EAAa,GACVC,EAAI,uBACPC,EAAIC,OAAOC,SAASC,KAAKC,UAAU,GAC/BP,EAAIE,EAAEM,KAAKL,IACfF,EAAWD,EAAE,IAAMS,mBAAmBT,EAAE,IAE5C,OAAOC,mCAGP,OACES,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,IAAA,CAAGE,KAAK,yBACNJ,EAAAC,EAAAC,cAAA,SAAA,KAAA,+BAxBQG,EAAAA,WCFI,IAAI9B,EAAAA,EAKH8B,EAAAA,UCEHC,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2DCVNC,EAAAA,EAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport logo from './logo.svg';\\nimport './App.css';\\nimport Spotify from 'spotify-web-api-js'\\n\\nconst spotifyWebApi = new Spotify();\\n\\nclass App extends Component {\\n  constructor(){\\n    super();\\n    const params = this.getHashParams();\\n    this.state = {\\n      loggedIn: params.access_token ? true: false,\\n    }\\n    if (params.access_token){\\n      spotifyWebApi.setAccessToken(params.access_token);\\n    }\\n  }\\n  getHashParams() {\\n    var hashParams = {};\\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\\n        q = window.location.hash.substring(1);\\n    while ( e = r.exec(q)) {\\n        hashParams[e[1]] = decodeURIComponent(e[2]);\\n    }\\n    return hashParams;\\n  }\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <a href=\\\"http://localhost:8888\\\">\\n          <button>Login with Spotify</button>\\n        </a>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"import React, { Component } from 'react';\\nimport logo from './logo.svg';\\nimport './App.css';\\nimport Spotify from 'spotify-web-api-js'\\n\\nconst spotifyWebApi = new Spotify();\\n\\n/**\\n * TODO: Complete\\n */\\nclass LoggedIn extends Component {\\n  constructor(){\\n    super();\\n  }\\n  render(){\\n    return (\\n      <div>\\n        <h>You are now a logged in user</h>\\n      </div>\\n    );\\n  }\\n}\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport loggedIn from './LoggedIn';\\nimport * as serviceWorker from './serviceWorker';\\n\\n//if ( !App.state.loggedIn ){\\nReactDOM.render(<App />, document.getElementById('root'));\\n//} else {\\n//  ReactDOM.render(<loggedIn />, document.getElementById('root'));\\n//}\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\",\"module.exports = __webpack_public_path__ + \\\"static/media/logo.5d5d9eef.svg\\\";\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{11:function(e,n,t){e.exports=t(18)},17:function(e,n,t){},18:function(e,n,t){\"use strict\";t.r(n);var o=t(0),a=t.n(o),c=t(10),r=t.n(c),s=(t(17),t(1)),i=t(2),l=t(5),u=t(3),d=t(6),h=(t(8),t(9),t(4)),m=t.n(h),w=new m.a,p=function(e){function n(){var e;Object(s.a)(this,n);var t=(e=Object(l.a)(this,Object(u.a)(n).call(this))).getHashParams();return e.state={loggedIn:!!t.access_token},t.access_token&&w.setAccessToken(t.access_token),e}return Object(d.a)(n,e),Object(i.a)(n,[{key:\"getHashParams\",value:function(){for(var e,n={},t=/([^&;=]+)=?([^&;]*)/g,o=window.location.hash.substring(1);e=t.exec(o);)n[e[1]]=decodeURIComponent(e[2]);return n}},{key:\"render\",value:function(){return a.a.createElement(\"div\",{className:\"App\"},a.a.createElement(\"a\",{href:\"http://localhost:8888\"},a.a.createElement(\"button\",null,\"Login with Spotify\")))}}]),n}(o.Component);new m.a,o.Component,Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(a.a.createElement(p,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,n,t){e.exports=t.p+\"static/media/logo.5d5d9eef.svg\"},9:function(e,n,t){}},[[11,1,2]]]);","extractedComments":[]}